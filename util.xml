<!-- vim: set ft=ant : -->
<project name="util">
    <taskdef resource="net/sf/antcontrib/antlib.xml"/>
    <dirname property="root.dir" file="${ant.file.util}" />
    <macrodef name="jsonpath">
        <attribute name="property" />
        <attribute name="prefix" default="" />
        <attribute name="basedir" default="${assets.dir}"/>
        <element name="files" implicit="true"/>
        <sequential>
            <local name="contents" />
            <pathconvert dirsep="/" property="contents" pathsep='", "'>
                <files />
                <map from="@{basedir}/" to="@{prefix}" />
            </pathconvert>
            <property name="@{property}" value='["${contents}"]' />
        </sequential>
    </macrodef>

    <macrodef name="yuicompress">
        <attribute name="type"/>
        <attribute name="output"/>
        <element name="yuiel" implicit="true"/>
        <text name="text"/>
        <sequential>
            <local name="input" />
            <loadresource property="input">
                <concat>
                    <header trim="true">@{text}</header>
                    <yuiel />
                </concat>
            </loadresource>
            <java inputstring="${input}" jar="${tools.yuicompressor}" fork="true" logError="true" failonerror="true" output="@{output}">
                <arg value="--type"/>
                <arg value="@{type}"/>
            </java>
        </sequential>
    </macrodef> 

    <macrodef name="htmltemplate">
        <attribute name="output" />
        <attribute name="input" />
        <attribute name="prefix" default='' />
        <attribute name="basedir" default='${assets.dir}' />
        <element name="scripts" optional="true"/>
        <element name="stylesheets" optional="true"/>
        <element name="variables" optional="true"/>
        <sequential>
            <parallel>
                <sequential>
                    <local name="scripts_list" />
                    <pathconvert property="scripts_list"
                        dirsep="/" pathsep=",">
                        <scripts/>
                        <map from="@{basedir}/" to="@{prefix}" />
                    </pathconvert>
                    <var name="html_scripts" value=""/>
                    <for param="src" list="${scripts_list}">
                        <sequential>
                            <var
                                name="html_scripts"
                                value="${html_scripts}&lt;script src='@{src}'&gt;&lt;/script&gt;${line.separator}"
                                />
                        </sequential>
                    </for>
                </sequential>
                <sequential>
                    <local name="stylesheets_list" />
                    <pathconvert property="stylesheets_list"
                        dirsep="/" pathsep=",">
                        <stylesheets/>
                        <map from="@{basedir}/" to="@{prefix}" />
                    </pathconvert>
                    <var name="html_stylesheets" value=""/>
                    <for param="src" list="${stylesheets_list}">
                        <sequential>
                            <var
                                name="html_stylesheets"
                                value="${html_stylesheets}&lt;link rel='stylesheet' type='text/css' href='@{src}' /&gt;${line.separator}"
                                />
                        </sequential>
                    </for>
                </sequential>
            </parallel>
            <copy file="@{input}" tofile="@{output}" overwrite="true">
                <filterchain>
                    <replacetokens>
                        <token key="scripts" value="${html_scripts}"/>
                        <token key="stylesheets" value="${html_stylesheets}"/>
                        <variables />
                    </replacetokens>
                </filterchain>
            </copy>
        </sequential>
    </macrodef>

    <scriptdef name="compiletemplates" language="javascript">
        <attribute name="output" />
        <attribute name="object" />
        <element name="fileset" type="fileset"/>
        <![CDATA[
        importPackage(Packages.java.io);
        importPackage(Packages.org.apache.tools.ant.util);
        
        function readFile(file) {
            return String(new java.lang.String(FileUtils.readFully(new FileReader(file))));
        }

        function writeFile(file, text) {
            var fw = new FileWriter(file);
            fw.write(text);
            fw.close();
        }
        function load(file) {
            eval(readFile(file));
        }

        load(FileUtils.translatePath(project.getProperty("tools.underscore")));

        var objectName = String(attributes.get("object"));
        var outputFile = attributes.get("output");

        var filesets = elements.get("fileset");
        var src = "/* Generated Template */\n\n"
        for (var i = 0; i < filesets.size(); i++) {
            var fileset = filesets.get(i);
            var basedir = fileset.getDir(project);
            var files = fileset.getDirectoryScanner(project).getIncludedFiles();
            for (var j = 0; j < files.length; j++) {
                var filename = files[j];
                var file = new File(basedir, filename);
                var contents = readFile(file);
                var basename = String(filename).replace(/\\/g, '/').slice(0, -5);
                src += objectName + "['" + basename + "'] = " + _.template(contents).source + ";\n";
            }
        }
        writeFile(outputFile, src);
        ]]>
    </scriptdef>
</project>
