<project name="List.it Chrome Extension">
    <import file="../../common.xml"/>

    <resources id="js.sidebar">
        <resources refid="js.libs" />
        <fileset file="${listit.js.platforms.dir}/chrome/client-pre.js" />
        <resources refid="js.common" />
        <resources refid="js.router" />
        <resources refid="js.templates" />
        <resources refid="js.views" />
        <filelist>
            <file name="${listit.js.platforms.dir}/chrome/client-post.js" />
            <file name="${listit.js.platforms.dir}/chrome/sidebar-setup.js" />
        </filelist>
        <resources refid="js.setup.views"/>
    </resources>

    <resources id="js.options">
        <resources refid="js.libs" />
        <fileset file="${listit.js.platforms.dir}/chrome/client-pre.js" />
        <resources refid="js.common" />
        <resources refid="js.router" />
        <resources refid="js.templates" />
        <resources refid="js.views" />
        <filelist>
            <file name="${listit.js.platforms.dir}/chrome/client-post.js" />
            <file name="${listit.js.platforms.dir}/chrome/options-setup.js" />
        </filelist>
        <resources refid="js.setup.views"/>
    </resources>
    <resources id="css.options">
        <resources refid="css.all" />
    </resources>

    <resources id="js.background">
        <resources refid="js.libs" />
        <fileset file="${listit.js.platforms.dir}/chrome/backbone.omnibox.js" />
        <resources refid="js.common" />
        <resources refid="js.storage" />
        <fileset file="${listit.js.platforms.dir}/chrome/chromeStorage.js" />
        <resources refid="js.models" />
        <resources refid="js.collectors" />
        <resources refid="js.setup.upgrade"/>
        <resources refid="js.setup.models"/>
        <fileset file="${listit.js.platforms.dir}/chrome/background.js" />
    </resources>

    <resources id="js.content">
        <resources refid="js.libs.jquery" />
        <fileset file="${listit.js.platforms.dir}/chrome/content.js" />
    </resources>


    <resources id="css.sidebar">
        <resources refid="css.all" />
        <fileset file="${listit.css.platforms.dir}/chrome/sidebar.css" />
    </resources>

    <target name="build.img" depends="-build.setup">
        <deploy-img dest="${build.img.dir}"/>
    </target>

    <target name="build.assets-debug" depends="-build.setup">
        <deploy-resource-debug name="wysihtml5" />

        <mk-defines-debug />

        <deploy-resource-debug name="sidebar" />
        <deploy-resource-debug name="options" />
        <deploy-resource-debug name="background" />
    </target>

    <target name="release" depends="-build.setup,build.img,build.assets,build.html,build.manifest">
        <exec executable="chromium">
            <arg value="--pack-extension=${build.dir}" />
            <arg value="--pack-extension-key=${privatekey}" />
        </exec>
    </target>

    <target name="debug" depends="-build.setup,build.assets-debug,build.html,build.manifest">
        <copy todir="${listit.dir}" overwrite="true" flatten="true">
            <filelist dir="${build.dir}">
                <file name="manifest.json" />
                <file name="index.html" />
                <file name="options.html" />
            </filelist>
        </copy>
    </target>

    <target name="build.assets" depends="-build.setup">
        <mkdir dir="${build.css.dir}" />
        <mkdir dir="${build.js.dir}" />

        <!-- Compiles given resources and stores their paths in buid.@resource.@type.path -->
        <parallel>
            <deploy-resource name="sidebar" />
            <deploy-resource name="background" />
            <deploy-resource name="options" />
            <deploy-resource name="wysihtml5" />
        </parallel>
    </target>

    <target name="build.html" depends="-build.setup">
        <deploy-html resource="sidebar" />
        <deploy-html resource="options" />
        <!--<deploy-html resource="add_dialog" />-->
    </target>

    <target name="build.manifest" depends="-build.setup">
        <!--
        <local name="content_path" />
        <jsonpath property="content_path" path="${build.content.js.path}" />
        -->
        <local name="background_path" />
        <jsonpath property="background_path" path="${build.background.js.path}" />
        <copy file="${platform.dir}/manifest.json.tmpl" tofile="${build.dir}/manifest.json">
            <filterchain>
                <filterreader classname="org.apache.tools.ant.filters.ReplaceTokens">
                    <param type="propertiesfile" value="manifest.properties" />
                    <!--<token key="content_js" value="${content_path}"/>-->
                    <param type="token" name="background_js" value="${background_path}" />
                    <param type="token" name="version" value="${listit.version}" />
                    <param type="token" name="name" value="${listit.name}" />
                    <param type="token" name="title" value="${listit.title}" />
                    <param type="token" name="description" value="${listit.description}" />
                </filterreader>
            </filterchain>
        </copy>
    </target>

    <target name="install">
        <exec executable="chromium">
            <arg value="--install-extension=${build.dir}/../chrome.crx" />
        </exec>
    </target>

    <target name="clean" depends="setup-platform">
        <delete dir="${build.dir}" />
        <delete dir="${deploy.dir}" />
    </target>
</project>
