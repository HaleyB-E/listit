<!-- vim: set ft=ant : -->
<project name="common">
    <dirname property="root.dir" file="${ant.file.common}" />

    <!-- Useful Functions -->
    <taskdef resource="net/sf/antcontrib/antlib.xml"/>
    <include file="${root.dir}/util.xml" />

    <!-- Properties -->
    <property file="${root.dir}/global.properties" />

    <!-- Resources -->
    <include file="${root.dir}/resources.xml" />


    <macrodef name="deploy-resource">
        <attribute name="name"/>
        <sequential><parallel>
            <if>
                <isreference refid="js.@{name}"/>
                <then>
                    <property name="build.@{name}.js.file" value="${build.js.dir}/@{name}.js" />
                    <property name="build.@{name}.js.path" basedir="${build.dir}" relative="true" value="${build.@{name}.js.file}" />

                    <yuicompress type="js" output="${build.@{name}.js.file}">
                        <resources refid="js.@{name}" />
                        DEBUG=false;
                        WYSIHTML5_CSS=["${build.wysihtml5.css.path}"];
                    </yuicompress>
                </then>
            </if>
            <if>
                <isreference refid="css.@{name}"/>
                <then>
                    <property name="build.@{name}.css.file" value="${build.css.dir}/@{name}.css" />
                    <property name="build.@{name}.css.path" basedir="${build.dir}" relative="true" value="${build.@{name}.css.file}" />

                    <yuicompress type="css" output="${build.@{name}.css.file}">
                        <resources refid="css.@{name}" />
                    </yuicompress>
                </then>
            </if>
        </parallel></sequential>
    </macrodef>

    <macrodef name="deploy-resource-debug">
        <attribute name="name"/>
        <sequential><parallel>
            <if>
                <isreference refid="js.@{name}"/>
                <then>
                    <pathconvert property="build.@{name}.js.path">
                        <fileset file="${listit.js.dir}/defines-debug.js"/>
                        <resources refid="js.@{name}" />
                        <globmapper from="${listit.dir}/*" to="*" />
                    </pathconvert>
                </then>
            </if>
            <if>
                <isreference refid="css.@{name}"/>
                <then>
                    <pathconvert property="build.@{name}.css.path">
                        <resources refid="css.@{name}" />
                        <globmapper from="${listit.dir}/*" to="*" />
                    </pathconvert>
                </then>
            </if>
        </parallel></sequential>
    </macrodef>

    <macrodef name="mk-defines-debug">
        <sequential>
            <local name="wysihtml5_json" />
            <jsonpath path="${build.wysihtml5.css.path}" property="wysihtml5_json" />
            <echo message="DEBUG=false; WYSIHTML5_CSS=${wysihtml5_json};" 
                file="${listit.js.dir}/defines-debug.js" />
        </sequential>
    </macrodef>

    <macrodef name="deploy-html">
        <attribute name="resource"/>
        <sequential>
            <htmltemplate
                input="${listit.html.tmpl}"
                output="${build.@{resource}.html.file}"
                scripts="${build.@{resource}.js.path}"
                stylesheets="${build.@{resource}.css.path}" />
        </sequential>
    </macrodef>

    <target name="setup-platform">
        <condition property="build.is.mode.release">
            <equals arg1="${build.target}" arg2="release" />
        </condition>
        <propertyregex
            property="platform"
            input="${ant.file}"
            regexp=".*/(.*?)/build.xml"
            select="\1" />
        <property name="platform.dir" value="${base-platform.dir}/${platform}" />
        <property name="deploy.dir" value="${base-deploy.dir}/${platform}" />
        <property name="build.dir" value="${base-build.dir}/${platform}" />
        <property file="${platform.dir}/platform.properties" />
    </target>

    <target name="mkdirs" depends="setup-platform">
        <mkdir dir="${deploy.dir}" />
        <mkdir dir="${build.dir}" />
    </target>

    <globmapper id="resource-mapper" from="${listit.dir}/*" to="*"/>

    <macrodef name="deploy-img">
        <attribute name="dest" />
        <sequential>
            <mkdir dir="@{dest}" />
            <copy todir="@{dest}">
                <fileset dir="${listit.img.dir}">
                    <include name="**/*.png"/>
                    <include name="**/*.jpg"/>
                    <include name="**/*.gif"/>
                </fileset>
            </copy>
        </sequential>
    </macrodef>

    <target name="compile-templates">
        <compiletemplates output="${listit.js.templates.file}" object="ListIt.templates">
            <fileset dir="${listit.js.templates.dir}" includes="**/*.html" />
        </compiletemplates>
    </target>

    <target name="jshint">
        <jshint fail="${build.is.mode.release}">
            <fileset refid="jshint-files" />
        </jshint>
    </target>

    <target name="-build.setup" depends="setup-platform,mkdirs,compile-templates,jshint" />
</project>
