<!-- vim: set ft=ant : -->
<project name="common">
    <taskdef resource="net/sf/antcontrib/antlib.xml"/>
    <dirname property="root.dir" file="${ant.file.common}" />


    <property file="${root.dir}/global.properties" />
    <include file="${root.dir}/resources.xml" />


    <target name="setup-platform">
        <condition property="build.is.mode.release">
            <equals arg1="${build.target}" arg2="release" />
        </condition>
        <propertyregex
            property="platform"
            input="${ant.file}"
            regexp=".*/(.*?)/build.xml"
            select="\1" />
        <property name="platform.dir" value="${base-platform.dir}/${platform}" />
        <property name="deploy.dir" value="${base-deploy.dir}/${platform}" />
        <property name="build.dir" value="${base-build.dir}/${platform}" />
        <property file="${platform.dir}/platform.properties" />
    </target>

    <target name="mkdirs" depends="setup-platform">
        <mkdir dir="${deploy.dir}" />
        <mkdir dir="${build.dir}" />
    </target>


    <globmapper id="resource-mapper" from="${listit.dir}/*" to="*"/>

    <macrodef name="jsonpath">
        <attribute name="path" />
        <attribute name="property" />
        <sequential>
            <local name="contents" />
            <pathconvert property="contents" pathsep='", "'>
                <path path="@{path}"/>
                <globmapper from="${basedir}/*" to="*" />
            </pathconvert>
            <property name="@{property}" value='["${contents}"]' />
        </sequential>
    </macrodef>

    <macrodef name="deploy-img">
        <attribute name="dest" />
        <sequential>
            <mkdir dir="@{dest}" />
            <copy todir="@{dest}">
                <fileset dir="${listit.img.dir}">
                    <include name="*.png"/>
                    <include name="*.jpg"/>
                    <include name="*.gif"/>
                </fileset>
            </copy>
        </sequential>
    </macrodef>

    <macrodef name="yuicompress">
        <attribute name="type"/>
        <attribute name="output"/>
        <element name="yuiel" implicit="true"/>
        <sequential>
            <local name="input" />
            <loadresource property="input">
                <concat>
                    <yuiel />
                </concat>
            </loadresource>
            <apply errorproperty="null" executable="java" parallel="true" inputstring="${input}" addsourcefile="false" output="@{output}">
                <yuiel />
                <arg value="-jar"/>
                <arg value="${tools.yuicompressor}"/>
                <arg value="--type"/>
                <arg value="@{type}"/>
                <mapper type="merge" to="@{output}" />
            </apply>
        </sequential>
    </macrodef> 

    <macrodef name="htmltemplate">
        <attribute name="output" />
        <attribute name="input" />
        <attribute name="scripts" default="" />
        <attribute name="stylesheets" default="" />
        <element name="htmltemplate-elements" optional="true" implicit="true" />
        <sequential>
            <parallel>
                <sequential>
                    <var name="html_scripts" value=""/>
                    <for param="src" list="@{scripts}" delimiter=":">
                        <sequential>
                            <var
                                name="html_scripts"
                                value="${html_scripts}&lt;script src='@{src}'&gt;&lt;/script&gt;${line.separator}"
                                />
                        </sequential>
                    </for>
                </sequential>
                <sequential>
                    <var name="html_stylesheets" value=""/>
                    <for param="src" list="@{stylesheets}" delimiter=":">
                        <sequential>
                            <var
                                name="html_stylesheets"
                                value="${html_stylesheets}&lt;link rel='stylesheet' type='text/css' href='@{src}' /&gt;${line.separator}"
                                />
                        </sequential>
                    </for>
                </sequential>
            </parallel>
            <copy file="@{input}" tofile="@{output}" overwrite="true">
                <filterchain>
                    <replacetokens>
                        <token key="scripts" value="${html_scripts}"/>
                        <token key="stylesheets" value="${html_stylesheets}"/>
                        <htmltemplate-elements />
                    </replacetokens>
                </filterchain>
            </copy>
        </sequential>
    </macrodef>

    <scriptdef name="compiletemplates" language="javascript">
        <attribute name="output" />
        <attribute name="object" />
        <element name="fileset" type="fileset"/>
        <![CDATA[
        importPackage(java.io);

        function readFile(file) {
            return ''+new java.lang.String(org.apache.tools.ant.util.FileUtils.readFully(new FileReader(file)));
        }

        function writeFile(file, text) {
            var fw = new FileWriter(file);
            fw.write(text);
            fw.close();
        }
        function load(file) {
            eval.call(this, readFile(file));
        }

        load("tools/underscore.js");

        var objectName = attributes.get("object");
        var outputFile = attributes.get("output");

        var filesets = elements.get("fileset");
        var src = "/* Generated Template */\n\n"
        for (var i = 0; i < filesets.size(); i++) {
            var fileset = filesets.get(i);
            var basedir = fileset.getDir(project);
            var files = fileset.getDirectoryScanner(project).getIncludedFiles();
            for (var j = 0; j < files.length; j++) {
                var file = new File(basedir, files[j]);
                var name = String(file.getName()).replace(/\..*$/,"");
                var contents = readFile(file);
                src += objectName + "." + name + " = " + _.template(contents).source + ";\n";
            }
        }
        writeFile(outputFile, src);
        ]]>
    </scriptdef>

    <scriptdef name="jshint" language="javascript">
        <attribute name="fail" />
        <element name="fileset" type="fileset"/>
        <![CDATA[
        importPackage(java.io);

        function readFile(file) {
            return ''+new java.lang.String(org.apache.tools.ant.util.FileUtils.readFully(new FileReader(file)));
        }

        function writeFile(file, text) {
            var fw = new FileWriter(file);
            fw.write(text);
            fw.close();
        }

        function load(file) {
            eval.call(this, readFile(file));
        }

        function echo(message, level) {
            var task = project.createTask("echo");
            task.setMessage(message);
            if (level) {
                task.setLevel(level);
            }
            task.perform();
        }

        load("tools/jshint.js");

        var options = JSON.parse(readFile(".jshintrc"));
        var fail = attributes.get("fail");

        var filesets = elements.get("fileset");
        var failed = false;
        for (var i = 0; i < filesets.size(); i++) {
            var fileset = filesets.get(i);
            var basedir = fileset.getDir(project);
            var files = fileset.getDirectoryScanner(project).getIncludedFiles();
            for (var j = 0; j < files.length; j++) {
                var filename = files[j],
                    contents = readFile(new File(basedir, filename));

                if (!JSHINT(contents, options)) {
                    failed = true;
                    JSHINT.errors.forEach(function(error) {
                        if (error) {
                            echo(filename + ':' + error.line + ':' +
                                 error.character + ', ' + error.reason);
                        }
                    });
                }
            }
        }
        if (fail && failed && failed.length > 0) {
            self.fail("JSHint failed.");
        }
        ]]>
    </scriptdef>

    <target name="compile-templates">
        <for param="dir">
            <dirset refid="template.dirs"/>
            <sequential>
                <local name="dirname" />
                <local name="name" />
                <dirname property="dirname" file="@{dir}" />
                <basename property="name" file="${dirname}" />
                <compiletemplates output="${dirname}/templates.js" object="ListIt.templates.${name}">
                    <fileset dir="@{dir}" includes="*.html" />
                </compiletemplates>
            </sequential>
        </for>
    </target>

    <target name="jshint">
        <jshint fail="${build.is.mode.release}">
            <fileset refid="jshint-files" />
        </jshint>
    </target>

    <target name="-build.setup" depends="setup-platform,mkdirs,compile-templates,jshint" />
</project>
